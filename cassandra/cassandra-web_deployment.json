{
  "kind": "Deployment",
  "apiVersion": "extensions/v1beta1",
  "metadata": {
    "name": "cassandra-web",
    "namespace": "kube-system",
    "labels": {
      "app": "cassandra-web"
    },
    "annotations": {
      "deployment.kubernetes.io/revision": "2",
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"cassandra-web\"},\"name\":\"cassandra-web\",\"namespace\":\"test22\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"cassandra-web\"}},\"template\":{\"metadata\":{\"labels\":{\"app\":\"cassandra-web\"}},\"spec\":{\"containers\":[{\"env\":[{\"name\":\"CASSANDRA_HOST_IP\",\"value\":\"reactive-sandbox-test-reactive-sandbox-zookeeper.test\"},{\"name\":\"CASSANDRA_PORT\",\"value\":\"9042\"}],\"image\":\"delermando/docker-cassandra-web:v0.4.0\",\"name\":\"cassandra-web\",\"ports\":[{\"containerPort\":3000}]}]}}}}\n"
    }
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "cassandra-web"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "cassandra-web"
        }
      },
      "spec": {
        "containers": [
          {
            "name": "cassandra-web",
            "image": "delermando/docker-cassandra-web:v0.4.0",
            "ports": [
              {
                "containerPort": 3000,
                "protocol": "TCP"
              }
            ],
            "env": [
              {
                "name": "CASSANDRA_HOST_IP",
                "value": "<ip>"
              },
              {
                "name": "CASSANDRA_PORT",
                "value": "9042"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "imagePullPolicy": "IfNotPresent"
          }
        ],
        "restartPolicy": "Always",
        "terminationGracePeriodSeconds": 30,
        "dnsPolicy": "ClusterFirst",
        "securityContext": {},
        "schedulerName": "default-scheduler"
      }
    },
    "strategy": {
      "type": "RollingUpdate",
      "rollingUpdate": {
        "maxUnavailable": "25%",
        "maxSurge": "25%"
      }
    },
    "revisionHistoryLimit": 10,
    "progressDeadlineSeconds": 600
  }
}